#! /bin/bash -l
#BSUB -q __batchqueue__
#BSUB -J __jobname__
#BSUB -o __resultsdir__/__jobname__.o%J
#BSUB -e __resultsdir__/__jobname__.e%J
#BSUB -nnodes __nodes__
#BSUB -W __walltime__
#BSUB -P __projectid__

#-----------------------------------------------------
# Set up the environment for use of the harness.     -
#                                                    -
#-----------------------------------------------------
source __rgtenvironmentalfile__
module load __nccstestharnessmodule__
module unload xalt
module load __compilermodulefile__
module load spectrum-mpi
module list

#-----------------------------------------------------
# Define some variables.                             -
#                                                    -
#-----------------------------------------------------
EXECUTABLE="__pathtoexecutable__"
STARTINGDIRECTORY="__startingdirectory__"
WORKDIR="__workdir__"
RESULTSDIR="__resultsdir__"
UNIQUE_ID_STRING="__unique_id_string__"
INPUTARGS="--ncell_x 64 --ncell_y 64 --ncell_z 64 --ne 64 --na 32 --nproc_x __npx__ --nproc_y __npy__ --nblock_z 64 --nthread_octant 8 --nthread_e 1"

export OMP_NUM_THREADS=__threads_per_process__

NUM_RS=$(( __nodes__ * $RGT_MACHINE_GPUS_PER_NODE ))
CPUS_PER_RS=__threads_per_process__
echo "NUM_RS = $NUM_RS"
echo "CPUS_PER_RS = $CPUS_PER_RS"

#-----------------------------------------------------
# Enusre that we are in the correct starting         -
# directory.                                         -
#                                                    -
#-----------------------------------------------------
cd $STARTINGDIRECTORY

#-----------------------------------------------------
# Make the working scratch space directory.          -
#                                                    -
#-----------------------------------------------------
if [ ! -e $WORKDIR ]
then
    mkdir -p $WORKDIR
fi

#-----------------------------------------------------
# Make the results directory.                        -
#                                                    -
#-----------------------------------------------------
if [ ! -e $RESULTSDIR ]
then
    mkdir -p $RESULTSDIR
fi

#-----------------------------------------------------
#  Change directory to the working directory.        -
#                                                    -
#-----------------------------------------------------
cd $WORKDIR

#-----------------------------------------------------
# Run the executable.                                -
#                                                    -
#-----------------------------------------------------
log_binary_execution_time.py --scriptsdir $STARTINGDIRECTORY --uniqueid $UNIQUE_ID_STRING --mode start

# mpirun version
#mpirun --map-by ppr:__processes_per_node__:node --bind-to core $EXECUTABLE 1> stdout.txt 2> stderr.txt

echo "jsrun --nrs $NUM_RS --rs_per_host $RGT_MACHINE_GPUS_PER_NODE --tasks_per_rs 1 --bind none --cpu_per_rs $CPUS_PER_RS $EXECUTABLE $INPUTARGS 1> stdout.txt 2> stderr.txt"
jsrun --nrs $NUM_RS --rs_per_host $RGT_MACHINE_GPUS_PER_NODE --tasks_per_rs 1 --bind none --cpu_per_rs $CPUS_PER_RS $EXECUTABLE $INPUTARGS 1> stdout.txt 2> stderr.txt

log_binary_execution_time.py --scriptsdir $STARTINGDIRECTORY --uniqueid $UNIQUE_ID_STRING --mode final

#-----------------------------------------------------
# Enusre that we return to the starting directory.   -
#                                                    -
#-----------------------------------------------------
cd $STARTINGDIRECTORY

#-----------------------------------------------------
# Copy the results back to the $RESULTSDIR           -
#                                                    -
#-----------------------------------------------------
cp -rf $WORKDIR/* $RESULTSDIR && rm -rf $WORKDIR

#-----------------------------------------------------
# Move the batch file name to  $RESULTSDIR           -
#                                                    -
#-----------------------------------------------------
mv __batchfilename__ $RESULTSDIR

#-----------------------------------------------------
# Check the final results.                           -
#                                                    -
#-----------------------------------------------------
check_executable_driver.py -p $RESULTSDIR -i $UNIQUE_ID_STRING

#-----------------------------------------------------
# The script now determines if we are to resubmit    -
# itself.                                            -
#                                                    -
#-----------------------------------------------------
case __resubmitme__ in
    0) 
       test_harness_driver.py -r;;

    1) 
       echo "No resubmit";;
esac 
