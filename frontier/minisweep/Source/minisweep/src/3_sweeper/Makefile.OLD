#==============================================================================
# Makefile for minisweep.
#==============================================================================

default: make_executables

#==============================================================================
# Default build options.
#==============================================================================

ifndef COMPILER_OPTION
  COMPILER_OPTION = GNU
endif

ifndef RELEASE_OPTION
  RELEASE_OPTION = DEBUG
endif

ifndef MPI_OPTION
  MPI_OPTION = MPI
endif

ifndef OPENMP_OPTION
  OPENMP_OPTION =
endif

ifndef CUDA_OPTION
  CUDA_OPTION =
endif

ifndef ALG_OPTIONS
  #ALG_OPTIONS = -DSWEEPER_KBA
  ALG_OPTIONS =
endif

#==============================================================================
# General settings.
#==============================================================================

MAKEFILE_PATH := $(abspath $(lastword $(MAKEFILE_LIST)))
MAKEFILE_DIR := $(patsubst %/,%,$(dir $(MAKEFILE_PATH)))
PACKAGE_DIR := $(MAKEFILE_DIR)/..

MAIN_STUB1 = sweep
MAIN_STUB2 = tester

INCLUDES = -I$(PACKAGE_DIR)/base -I$(PACKAGE_DIR)/sn_base -I$(PACKAGE_DIR)/sn

SOURCES          = $(wildcard $(PACKAGE_DIR)/base/*.c \
                              $(PACKAGE_DIR)/sn_base/*.c \
                              $(PACKAGE_DIR)/sn/*.c ) \
                              $(PACKAGE_DIR)/driver/run_tools.c
SOURCES_ALL      = $(wildcard $(PACKAGE_DIR)/base/*.c \
                              $(PACKAGE_DIR)/sn_base/*.c \
                              $(PACKAGE_DIR)/sn/*.c \
                              $(PACKAGE_DIR)/driver/*.c )
CUDA_SOURCES_ALL = $(wildcard $(PACKAGE_DIR)/base/*.cu \
                              $(PACKAGE_DIR)/sn_base/*.cu \
                              $(PACKAGE_DIR)/sn/*.cu \
                              $(PACKAGE_DIR)/driver/*.cu )
OBJECTS = $(foreach file,$(patsubst %.c,%.o,$(SOURCES)),$(notdir $(file)))

CC :=
CFLAGS :=
COMMON_FLAGS := 

ifneq ($(NM_VALUE),)
  COMMON_FLAGS := $(COMMON_FLAGS) -DNM_VALUE=$(NM_VALUE)
endif

ifneq ($(NU_VALUE),)
  COMMON_FLAGS := $(COMMON_FLAGS) -DNU_VALUE=$(NU_VALUE)
endif

ifeq ($(RELAXED_TESTING),1)
  COMMON_FLAGS := $(COMMON_FLAGS) -DRELAXED_TESTING
endif

#==============================================================================
# Compiler options.
#==============================================================================

ifeq ($(COMPILER_OPTION),GNU)
  #---"module swap PrgEnv-pgi PrgEnv-gnu"
  CC = cc
  ifeq ($(RELEASE_OPTION),DEBUG)
    CFLAGS := $(CFLAGS) -ansi -Wmissing-prototypes -g -Dinline=
    COMMON_FLAGS := $(COMMON_FLAGS)
  else
    CFLAGS := $(CFLAGS) -O3 -fomit-frame-pointer -funroll-loops \
                       -finline-limit=100000000
    COMMON_FLAGS := $(COMMON_FLAGS) -DNDEBUG
  endif
endif

ifeq ($(COMPILER_OPTION),INTELMIC)
  CC = mpiicc
  #
  # -guide
  # -guide-vec=4
  # -openmp-report=2
  # -watch
  # -Winline   #---this appears to give inaccurate information.
  # -opt-report=3
  # -vec-report6
  # -S -fsource-asm
  #
  # -no-vec -no-simd
  # -openmp-simd
  # -opt-streaming-cache-evict=3
  # -opt-threads-per-core=2
  # -opt-assume-safe-padding
  # -finline-functions
  # -finline -finline-limit=1000
  # -fno-alias -fargument-noalias
  #
  CFLAGS := $(CFLAGS) -mmic -vec-report1 -Dinline=__forceinline -ip -prec-div -O3 -align -ansi-alias -fargument-noalias -restrict -D__restrict__=restrict -fno-alias -fargument-noalias
  ifeq ($(RELEASE_OPTION),DEBUG)
    CFLAGS := $(CFLAGS)
    COMMON_FLAGS := $(COMMON_FLAGS)
                   # -strict-ansi -Dinline=
  else
    CFLAGS := $(CFLAGS)
    COMMON_FLAGS := $(COMMON_FLAGS) -DNDEBUG
  endif
endif

ifeq ($(COMPILER_OPTION),PGI)
  CC = cc
  CFLAGS := $(CFLAGS) -fast -Mfprelaxed -alias=ansi -Msafeptr -tp=istanbul-64
  COMMON_FLAGS := $(COMMON_FLAGS) -DNDEBUG
endif

#==============================================================================
# Options for specific parallel APIs.
#==============================================================================

ifeq ($(MPI_OPTION),MPI)
  ifneq ($(COMPILER_OPTION),INTELMIC)
    CFLAGS := $(CFLAGS) -L$(MPICH_DIR)/lib -Wl,-rpath=$(MPICH_DIR)/lib -lmpich
    COMMON_FLAGS := $(COMMON_FLAGS) -DUSE_MPI -I$(MPICH_DIR)/include
  else
    CFLAGS := $(CFLAGS)
    COMMON_FLAGS := $(COMMON_FLAGS) -DUSE_MPI
  endif
else
  CC = gcc
endif

ifneq ($(OPENMP_OPTION),)
  CFLAGS := $(CFLAGS) -DUSE_OPENMP
  ifeq ($(COMPILER_OPTION),PGI)
    CFLAGS := $(CFLAGS) -mp=bind
  endif
  ifeq ($(COMPILER_OPTION),GNU)
    CFLAGS := $(CFLAGS) -fopenmp
  endif
  ifeq ($(COMPILER_OPTION),INTELMIC)
    CFLAGS := $(CFLAGS) -openmp
  endif
  COMMA := ,
  ifneq ($(findstring $(COMMA)THREADS$(COMMA),$(COMMA)$(OPENMP_OPTION)$(COMMA)),)
    CFLAGS := $(CFLAGS) -DUSE_OPENMP_THREADS
  endif
  ifneq ($(findstring $(COMMA)VO_ATOMIC$(COMMA),$(COMMA)$(OPENMP_OPTION)$(COMMA)),)
    CFLAGS := $(CFLAGS) -DUSE_OPENMP_VO_ATOMIC
  endif
endif

ifeq ($(CUDA_OPTION),1)
  CUDA_ARGS := -arch=sm_35 -O3 -use_fast_math --maxrregcount 128 -Xcompiler "-fstrict-aliasing" -Xcompiler "-fargument-noalias-global"
  ifneq ($(RELEASE_OPTION),DEBUG)
    CUDA_ARGS := $(CUDA_ARGS) -DNDEBUG
  endif
  ifeq ($(COMPILER_OPTION),PGI)
    $(error "CUDA requires GNU compiler to be used.")
  endif
make_objects: make_objects_c
	nvcc -c $(CUDA_SOURCES_ALL) $(COMMON_FLAGS) $(INCLUDES) $(ALG_OPTIONS) -DUSE_CUDA $(CUDA_ARGS)
else
make_objects: make_objects_c
endif

#==============================================================================
# Targets.
#==============================================================================

make_objects_c:
	$(CC) -c $(SOURCES_ALL) $(COMMON_FLAGS) $(INCLUDES) $(CFLAGS) $(ALG_OPTIONS)

make_executables: make_objects
	$(CC) -o $(MAIN_STUB1) $(OBJECTS) $(MAIN_STUB1).o \
              $(COMMON_FLAGS) $(INCLUDES) $(CFLAGS) $(ALG_OPTIONS)
	$(CC) -o $(MAIN_STUB2) $(OBJECTS) $(MAIN_STUB2).o \
              $(COMMON_FLAGS) $(INCLUDES) $(CFLAGS) $(ALG_OPTIONS)
	rm -f *.o

test:
	time ../scripts/test.bash

clean:
	rm -f *.o

distclean: clean
	rm -f $(MAIN_STUB1) $(MAIN_STUB2)

#==============================================================================
#
#make COMPILER_OPTION=INTELMIC NM_VALUE=16 RELEASE_OPTION=
#
#if [ $? = 0 ] ; then
#  \cp $HOME/minisweep/src/sweep $TMPDIR/mic0
#  ARGS="--ncell_x 1 --ncell_y 1 --ncell_z 1 --ne 1 --na 32 --nproc_x 1 --nproc_y 1"
#  micmpiexec -n 1 -wdir $TMPDIR -host ${HOSTNAME}-mic0 $TMPDIR/sweep $ARGS
#fi
#
#run:
#	./$(EXECUTABLE) --ncell_x 10 --ncell_y 10 --ncell_z 10 --ne 30 --nm 16 --na 33
#
#runmany:
#	bash -c 'for e in `seq 1 3` ; do for i in `seq 1 7` ; do for j in `seq 1 7` ; do ./$(EXECUTABLE) 10 10 10 $$e $$i $$j ; done; done; done'
#
#test:
#	./tester
#
#run_cray:
#	aprun -n 1 $(EXECUTABLE) --ncell_x 10 --ncell_y 10 --ncell_z 10 --ne 30 --nm 16 --na 64
#
#==============================================================================
